WITH A_TABLE AS (
    SELECT B.ID, B.SKILL_CODE, 'A' AS GRADE
    FROM SKILLCODES AS A, DEVELOPERS AS B
    WHERE (A.CODE & B.SKILL_CODE) != 0
    AND A.NAME = 'PYTHON'
    INTERSECT
    SELECT B.ID, B.SKILL_CODE, 'A' AS GRADE
    FROM SKILLCODES AS A, DEVELOPERS AS B
    WHERE (A.CODE & B.SKILL_CODE) != 0
    AND A.CATEGORY = 'Front End'
), B_TABLE AS (
    SELECT B.ID, B.SKILL_CODE, 'B' AS GRADE
    FROM SKILLCODES AS A, DEVELOPERS AS B
    WHERE (A.CODE & B.SKILL_CODE) != 0
    AND A.NAME = 'C#'    
), C_TABLE AS (
    SELECT B.ID, B.SKILL_CODE, 'C' AS GRADE
    FROM SKILLCODES AS A, DEVELOPERS AS B
    WHERE (A.CODE & B.SKILL_CODE) != 0
    AND A.CATEGORY = 'Front End'    
), UNIONED AS (
    SELECT * FROM A_TABLE
    UNION
    SELECT * FROM B_TABLE
    UNION
    SELECT * FROM C_TABLE    
)

SELECT MIN(GRADE) AS GRADE, B.ID, EMAIL
FROM UNIONED AS A
INNER JOIN DEVELOPERS AS B
ON A.ID = B.ID
GROUP BY B.ID
ORDER BY GRADE ASC, B.ID ASC